# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
import("//build/config/chromecast_build.gni")
import("//build/config/compiler/compiler.gni")
import("//build/config/crypto.gni")
import("//build/config/features.gni")
import("//build/config/ui.gni")
import("//net/features.gni")
import("//testing/libfuzzer/fuzzer_test.gni")
import("//testing/test.gni")
import("//third_party/icu/config.gni")
import("//third_party/protobuf/proto_library.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/v8_context_snapshot/v8_context_snapshot.gni")
import("//url/features.gni")
import("//v8/gni/v8.gni")

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/linker_version_script.gni")
  import("//build/config/android/rules.gni")
} else if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
}

# The way the cache uses mmap() is inefficient on some Android devices. If
# this flag is set, we hackily avoid using mmap() in the disk cache. We are
# pretty confident that mmap-ing the index would not hurt any existing x86
# android devices, but we cannot be so sure about the variety of ARM devices.
# So enable it for x86 only for now.
#posix_avoid_mmap = is_android && current_cpu != "x86"

#use_v8_in_net = !is_ios && !is_proto_quic
#enable_built_in_dns = !is_ios && !is_proto_quic

# Unix sockets are not supported on iOS or NaCl.
#enable_unix_sockets = is_posix && !is_ios && !is_nacl

# x86/x64 cast_shell builds run on regular trybots and can use python runtime
# and remote test server. ARM cast_shell builds don't have python runtime.
#is_arm_cast_shell_build =
#    is_chromecast && (current_cpu == "arm" || current_cpu == "arm64")

# Python works only on Linux, MacOS and Windows so exclude the others,
# chromecast, android, fuchsia, ios.
#enable_python_utils =
#    !is_arm_cast_shell_build && !is_android && !is_fuchsia && !is_ios

andjs_jni_registration_header = "$root_build_dir/gen/andjs/android/andjs_jni_registration.h"

#generate_jni_registration("andjs_jni_registration") {
#  target = ":andjs_public_java"
#  header_output = andjs_jni_registration_header
#}

java_group("andjs_public_java") {
  deps = [
    ":andjs_java",
  ]
}

if (is_android) {
  generate_jar_jni("reflection_jni_headers") {
    jni_package = "andjs"
    classes = [
      "java/lang/Class.class",
      "java/lang/Object.class",
      "java/lang/reflect/AccessibleObject.class",
      "java/lang/reflect/Method.class",
      "java/lang/reflect/Modifier.class",
    ]
  }
}

generate_jni("andjs_jni_headers") {
  jni_package = "andjs"
  sources = [
    "java/src/com/wuruxu/andjs/AndJS.java",
  ]
}

shared_library("libandjs_jni") {
  sources = [
    "//content/common/android/gin_java_bridge_value.cc",
    "//content/common/android/gin_java_bridge_errors.cc",
    "//content/browser/android/java/gin_java_bound_object_delegate.cc",
    "//content/browser/android/java/java_bridge_thread.cc",
    "//content/browser/android/java/gin_java_method_invocation_helper.cc",
    "//content/browser/android/java/java_method.cc",
    "//content/browser/android/java/java_type.cc",
    "//content/browser/android/java/jni_reflect.cc",
    "//content/browser/android/java/gin_java_bound_object.cc",
    "//content/browser/android/java/gin_java_script_to_java_types_coercion.cc",
    "//content/renderer/v8_value_converter_impl.cc",
    "java/gin_java_function_invocation_helper.cc",
    "java/gin_java_bridge_object.cc",
    "java/andjs_jni.cc",
    "java/andjs_core.cc",
    andjs_jni_registration_header,
  ]

  defines = [ "V8_USE_EXTERNAL_STARTUP_DATA", ]

  deps = [
    ":andjs_jni_headers",
    ":reflection_jni_headers",
    ":sample_apk__final_jni",
    "//base",
    "//v8",
    "//v8:v8_libplatform",
    "//gin",
    #":andjs_jni_registration",
    #"//content/shell:content_shell_lib",
    #"//content/shell:pak",
  ]
}

android_library("andjs_java") {
  java_files = [
    "java/src/com/wuruxu/andjs/AndJS.java",
  ]
  deps = [
    "//base:base_java",
  ]
  srcjar_deps = [
    #":net_errors_java",
  ]
}

andjs_sample_manifest =
    "$target_gen_dir/andjs_sample_manifest/AndroidManifest.xml"

android_resources("andjs_sample_java_resources") {
  resource_dirs = [ "sample_apk/java/res" ]
  deps = [
    "//third_party/android_deps:android_support_design_java",
    "//third_party/android_deps:android_support_v7_appcompat_java",
    "//third_party/android_deps:android_support_v7_gridlayout_java",
    "//third_party/android_deps:android_support_v7_recyclerview_java",
    "//third_party/android_deps:com_android_support_constraint_constraint_layout_java",
  ]
  custom_package = "com.wuruxu.andjs"
}

android_library("andjs_sample_java") {
  deps = [
    ":andjs_sample_java_resources",
    ":andjs_sample_manifest",
    "//andjs:andjs_java",
    "//base:base_java",
    "//third_party/android_deps:android_support_v7_appcompat_java",
    "//third_party/android_deps:com_android_support_constraint_constraint_layout_java",
  ]
  java_files = [
    "sample_apk/java/src/com/wuruxu/andjs/sample/MainActivity.java",
    "sample_apk/java/src/com/wuruxu/andjs/sample/MyObject.java",
  ]

  android_manifest_for_lint = andjs_sample_manifest
}

jinja_template("andjs_sample_manifest") {
  input = "sample_apk/AndroidManifest.xml"
  output = andjs_sample_manifest

  variables = [
    "min_sdk_version=19",
    "target_sdk_version=$android_sdk_version",
  ]
}

android_assets("andjs_assets") {
  sources = [
  ]
  disable_compression = true
  deps = [
    "//third_party/icu:icu_assets",
  ]

  if (use_v8_context_snapshot) {
    deps += [ "//tools/v8_context_snapshot:v8_context_snapshot_assets" ]
  } else {
    deps += [ "//v8:v8_external_startup_data_assets" ]
  }
}

android_apk("sample_apk") {
  enable_multidex = true
  deps = [
    ":andjs_assets",
    ":andjs_sample_java",
    "//base:base_java",
  ]
  apk_name = "AndJS-Sample"
  version_code = "3"
  version_name = "1.0.0c"
  android_manifest = andjs_sample_manifest
  android_manifest_dep = ":andjs_sample_manifest"
  shared_libraries = [ ":libandjs_jni" ]
  command_line_flags_file = "andjs-command-line"
  jni_registration_header = andjs_jni_registration_header

  proguard_enabled = true 
  if(!defined(proguard_configs)) {
    proguard_configs = []
  }
  proguard_configs += [
    "//andjs/java/andjs_for_android.flags",
    "//base/android/proguard/chromium_code.flags",
    "//base/android/proguard/chromium_apk.flags",
  ]
}
