# Copyright (c) 2019 wuruxu <wrxzzj@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import("//build/buildflag_header.gni")
import("//build/config/chromecast_build.gni")
import("//build/config/compiler/compiler.gni")
import("//build/config/crypto.gni")
import("//build/config/features.gni")
import("//build/config/ui.gni")
import("//net/features.gni")
import("//testing/libfuzzer/fuzzer_test.gni")
import("//testing/test.gni")
import("//third_party/icu/config.gni")
import("//third_party/protobuf/proto_library.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/v8_context_snapshot/v8_context_snapshot.gni")
import("//url/features.gni")
import("//v8/gni/v8.gni")

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/linker_version_script.gni")
  import("//build/config/android/rules.gni")
} else if (is_mac) {
  import("//build/config/mac/mac_sdk.gni")
}

# The way the cache uses mmap() is inefficient on some Android devices. If
# this flag is set, we hackily avoid using mmap() in the disk cache. We are
# pretty confident that mmap-ing the index would not hurt any existing x86
# android devices, but we cannot be so sure about the variety of ARM devices.
# So enable it for x86 only for now.
#posix_avoid_mmap = is_android && current_cpu != "x86"

#use_v8_in_net = !is_ios && !is_proto_quic
#enable_built_in_dns = !is_ios && !is_proto_quic

# Unix sockets are not supported on iOS or NaCl.
#enable_unix_sockets = is_posix && !is_ios && !is_nacl

# x86/x64 cast_shell builds run on regular trybots and can use python runtime
# and remote test server. ARM cast_shell builds don't have python runtime.
#is_arm_cast_shell_build =
#    is_chromecast && (current_cpu == "arm" || current_cpu == "arm64")

# Python works only on Linux, MacOS and Windows so exclude the others,
# chromecast, android, fuchsia, ios.
#enable_python_utils =
#    !is_arm_cast_shell_build && !is_android && !is_fuchsia && !is_ios

andjs_jni_registration_header = "$root_build_dir/gen/andjs/android/andjs_jni_registration.h"
andjs_quickjs_jni_registration_header = "$root_build_dir/gen/andjs/android/andjs_quickjs_jni_registration.h"

#generate_jni_registration("andjs_jni_registration") {
#  target = ":andjs_public_java"
#  header_output = andjs_jni_registration_header
#}
config("quickjs_config") {
  include_dirs = [
    "quickjs-2019-07-09/",
  ]

  if (is_clang) {
    cflags = [
      "-Wall",
      "-Wextra",
      "-Wno-sign-compare",
      "-Wundef",
      "-Wuninitialized",
      "-Wno-missing-field-initializers",
      "-Wwrite-strings",
      "-Wchar-subscripts",
      "-funsigned-char",
      "-Wunused",
      "-Wno-unused-parameter",
      "-Wno-unused-variable",
    ]
  }

  defines = [
    "CONFIG_VERSION=\"2019-07-09\"",
    "CONFIG_BIGNUM",
    "EMSCRIPTEN",
    #"HAVE_SYS_SOCKET_H",
    #"HAVE_SYS_IOCTL_H",
    #"HAVE_SYS_UIO_H",
  ]
}

java_group("andjs_public_java") {
  deps = [
    ":andjs_java",
  ]
}

if (is_android) {
  generate_jar_jni("reflection_jni_headers") {
    jni_package = "andjs"
    classes = [
      "java/lang/Class.class",
      "java/lang/Object.class",
      "java/lang/reflect/AccessibleObject.class",
      "java/lang/reflect/Method.class",
      "java/lang/reflect/Modifier.class",
    ]
  }
}

generate_jni("andjs_jni_headers") {
  jni_package = "andjs"
  sources = [
    "java/src/com/github/wuruxu/andjs/AndJS.java",
  ]
}

#component("libquickjs") {
#  sources = [
#    #"quickjs.c",
#    #"libbf.c",
#    #"libregexp.c",
#    #"libunicode.c",
#    #"quickjs-libc.c",
#    #"qjscalc.c",
#    #"cutils.c",
#    "quickjs-2019-07-09/quickjs.c",
#    "quickjs-2019-07-09/libbf.c",
#    "quickjs-2019-07-09/libregexp.c",
#    "quickjs-2019-07-09/libunicode.c",
#    "quickjs-2019-07-09/quickjs-libc.c",
#    "quickjs-2019-07-09/qjscalc.c",
#    "quickjs-2019-07-09/cutils.c",
#  ]
#
#  public_deps = [
#  ]
#
#  public_configs = [ ":quickjs_config" ]
#}

shared_library("libandjs_quickjs_jni") {
  include_dirs = [
    ".",
    "quickjs-2019-07-09/",
  ]

  sources = [
    "andjs_core_quickjs.cc",
    "andjs_jni.cc",
    "quickjs-2019-07-09/quickjs.c",
    "quickjs-2019-07-09/libbf.c",
    "quickjs-2019-07-09/libregexp.c",
    "quickjs-2019-07-09/libunicode.c",
    "quickjs-2019-07-09/quickjs-libc.c",
    "quickjs-2019-07-09/qjscalc.c",
    "quickjs-2019-07-09/cutils.c",
    "//content/common/android/gin_java_bridge_value.cc",
    "//content/common/android/gin_java_bridge_errors.cc",
    "//content/browser/android/java/gin_java_bound_object_delegate.cc",
    "//content/browser/android/java/java_bridge_thread.cc",
    "//content/browser/android/java/gin_java_method_invocation_helper.cc",
    "//content/browser/android/java/java_method.cc",
    "//content/browser/android/java/java_type.cc",
    "//content/browser/android/java/jni_reflect.cc",
    "//content/browser/android/java/gin_java_bound_object.cc",
    "//content/browser/android/java/gin_java_script_to_java_types_coercion.cc",
    andjs_quickjs_jni_registration_header,
  ]

  defines = [
    "_ENABLE_QUICKJS_",
    "__OBJC__",
    #"CONFIG_VERSION=\"2019-07-09\"",
    #"CONFIG_BIGNUM",
  ]

  deps = [
    ":andjs_jni_headers",
    ":reflection_jni_headers",
    ":sample_quickjs_apk__final_jni",
    "//base",
    #":libquickjs",
    #"//third_party/quickjs:libquickjs",
    "//crypto",
  ]
  public_configs = [ ":quickjs_config" ]
}

shared_library("libandjs_jni") {
  sources = [
    "//content/common/android/gin_java_bridge_value.cc",
    "//content/common/android/gin_java_bridge_errors.cc",
    "//content/browser/android/java/gin_java_bound_object_delegate.cc",
    "//content/browser/android/java/java_bridge_thread.cc",
    "//content/browser/android/java/gin_java_method_invocation_helper.cc",
    "//content/browser/android/java/java_method.cc",
    "//content/browser/android/java/java_type.cc",
    "//content/browser/android/java/jni_reflect.cc",
    "//content/browser/android/java/gin_java_bound_object.cc",
    "//content/browser/android/java/gin_java_script_to_java_types_coercion.cc",
    "//content/renderer/v8_value_converter_impl.cc",
    "gin_java_function_invocation_helper.cc",
    "gin_java_bridge_object.cc",
    "andjs_jni.cc",
    "andjs_core.cc",
    andjs_jni_registration_header,
  ]

  defines = [ "V8_USE_EXTERNAL_STARTUP_DATA", ]
  defines += [ "ENABLE_V8_LOCKER", ]

  cflags = [ "-g", ]

  deps = [
    ":andjs_jni_headers",
    ":reflection_jni_headers",
    ":sample_apk__final_jni",
    "//base",
    "//base:i18n",
    "//v8",
    "//v8:v8_libplatform",
    "//gin",
    "//crypto",
    #"//content/shell:content_shell_lib",
    #"//content/shell:pak",
  ]
}

android_library("andjs_java") {
  java_files = [
    "java/src/com/github/wuruxu/andjs/AndJS.java",
    "java/src/com/github/wuruxu/andjs/CalledByJavascript.java",
  ]
  deps = [
    "//base:base_java",
  ]
}

andjs_sample_manifest =
    "$target_gen_dir/andjs_sample_manifest/AndroidManifest.xml"

android_resources("andjs_sample_java_resources") {
  resource_dirs = [ "sample_apk/java/res" ]
  deps = [
    "//third_party/android_deps:com_android_support_appcompat_v7_java",
    "//third_party/android_deps:com_android_support_constraint_constraint_layout_java",
  ]
  custom_package = "com.github.wuruxu.andjs.sample"
}

android_library("andjs_sample_java") {
  deps = [
    ":andjs_sample_java_resources",
    ":andjs_sample_manifest",
    ":andjs_java",
    "//third_party/android_deps:android_firebase_java",
  ]
  java_files = [
    "sample_apk/java/src/com/github/wuruxu/andjs/sample/MainActivity.java",
    "sample_apk/java/src/com/github/wuruxu/andjs/sample/MyObject.java",
    "sample_apk/java/src/com/github/wuruxu/andjs/sample/MyHome.java",
  ]

  android_manifest_for_lint = andjs_sample_manifest
}

jinja_template("andjs_sample_manifest") {
  input = "sample_apk/AndroidManifest.xml"
  output = andjs_sample_manifest

  variables = [
    "min_sdk_version=21",
    "target_sdk_version=$android_sdk_version",
  ]
}

android_assets("andjs_assets") {
  sources = [
  ]
  disable_compression = true
  deps = [
    "//third_party/icu:icu_assets",
  ]

  if (use_v8_context_snapshot) {
    deps += [ "//tools/v8_context_snapshot:v8_context_snapshot_assets" ]
  } else {
    deps += [ "//v8:v8_external_startup_data_assets" ]
  }
}

#android_aar_prebuilt("andjs_aar_java") {
#  aar_path = "$root_build_dir/andjs-v1.0.0a.aar"
#  #info_path = "libs/android_arch_lifecycle_runtime/android_arch_lifecycle_runtime.info"
#  deps = [
#    #":android_arch_core_common_java",
#    #":android_arch_lifecycle_common_java",
#  ]
#  ignore_assets = true
#  ignore_native_libraries = true
#}

android_apk("sample_apk") {
  enable_multidex = true
  deps = [
    ":andjs_assets",
    ":andjs_sample_java",
  ]

  apk_name = "AndJS-Sample"
  version_code = "6"
  version_name = "1.0.0c"
  android_manifest = andjs_sample_manifest
  android_manifest_dep = ":andjs_sample_manifest"
  shared_libraries = [ ":libandjs_jni" ]
  command_line_flags_file = "andjs-command-line"
  jni_registration_header = andjs_jni_registration_header

  proguard_enabled = true 
  if(!defined(proguard_configs)) {
    proguard_configs = []
  }
  proguard_configs += [
    "//andjs/java/andjs_for_android.flags",
    "//base/android/proguard/chromium_code.flags",
    "//base/android/proguard/chromium_apk.flags",
  ]
}

android_apk("sample_quickjs_apk") {
  enable_multidex = true
  deps = [
    ":andjs_sample_java",
  ]

  apk_name = "AndJS-QuickJS-Sample"
  version_code = "7"
  version_name = "1.0.0d"
  android_manifest = andjs_sample_manifest
  android_manifest_dep = ":andjs_sample_manifest"
  shared_libraries = [ ":libandjs_quickjs_jni" ]
  command_line_flags_file = "andjs-command-line"
  jni_registration_header = andjs_quickjs_jni_registration_header

  proguard_enabled = true 
  if(!defined(proguard_configs)) {
    proguard_configs = []
  }
  proguard_configs += [
    "//andjs/java/andjs_for_android.flags",
    "//base/android/proguard/chromium_code.flags",
    "//base/android/proguard/chromium_apk.flags",
  ]
}

#android_app_bundle_module("sample_base_app") {
#  deps = [
#    ":andjs_assets",
#    ":andjs_sample_java",
#    "//base:base_java",
#  ]
#
#  is_base_module = true
#  module_name = "SampleBaseApp"
#  version_code = "3"
#  version_name = "1.0.0a"
#  min_sdk_version = 21
#  android_manifest = andjs_sample_manifest
#  android_manifest_dep = ":andjs_sample_manifest"
#  shared_libraries = [ ":libandjs_jni" ]
#  #command_line_flags_file = "andjs-command-line"
#  #jni_registration_header = andjs_jni_registration_header
#}
#
#android_app_bundle("sample_app") {
#  base_module_target = ":sample_base_app"
#  bundle_name = "AndJS-Sample"
#  sign_bundle = true
#  enable_multidex = true
#  enable_language_splits = false
#  proguard_enabled = true
#  keystore_path = "//build/android/gh.keystore"
#  keystore_password = "xj317318"
#  keystore_name = "wuruxu"
#
#  if(!defined(proguard_configs)) {
#    proguard_configs = []
#  }
#  proguard_configs += [
#    "//andjs/java/andjs_for_android.flags",
#    "//base/android/proguard/chromium_code.flags",
#    "//base/android/proguard/chromium_apk.flags",
#  ]
#}

dist_aar("andjs_aar") {
  deps = [
    ":andjs_assets",
    ":andjs_java",
    ":libandjs_jni",
  ]

  #native_libraries = [ "$root_build_dir/libandjs_jni.so" ]

  if(!defined(proguard_configs)) {
    proguard_configs = []
  }
  proguard_configs += [
    "//andjs/java/andjs_for_android.flags",
    "//base/android/proguard/chromium_code.flags",
    "//base/android/proguard/chromium_apk.flags",
  ]
  output = "$root_build_dir/andjs-v1.0.0c-cr76.aar"
}
